from flask import Flask, request, redirect, render_template, session
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['DEBUG'] = True
# Address string to connect to the database so we can use it.
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://get-it-done:beproductive@localhost:8889/get-it-done'
# Will echo a lot of the SQL commands that are generated by SQL Alchemy
app.config['SQLALCHEMY_ECHO'] = True
# Create a database that we can use within the Python code. Finally linking all of this together.
db = SQLAlchemy(app)

# DB is the object we created above, and it has an object "Model" inside of it
class Task(db.Model):
    id = db.Column(db.Integer, primary_key = True) # Gives each of our task objects its own unique Primary Key ID
    name = db.Column(db.String(120))
    completed = db.Column(db.Boolean) # Make a new column to say whether or not the task has been completed by having a Boolean value

    def __init__(self, name): # Takes the user defined task as the name variable.
        self.name = name
        self.completed = False

class User(db.Model):

    id = db.Column(db.Integer, primary_key = True)
    email = db.Column(db.String(120), unique = True) # Make sure you can't register two records with the same email
    password = db.Column(db.String(120))

    def __init__(self, email, password):
        self.email = email
        self.password = password

@app.before_request
def require_login():
    allowed_routes = ['login', 'register']
    if request.endpoint not in allowed_routes and 'email' not in session:
        return redirect('/login')

@app.route('/login', methods=['POST', 'GET'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = User.query.filter_by(email=email).first()
        if user and user.password == password:
            session['email'] = email
            return redirect('/')
        else:
            # TODO -- Tell them why the login failed.
            return '<h1>Error!</h1>'

    return render_template('login.html')

@app.route('/register', methods=['POST', 'GET'])
def register():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']
        verify = request.form['verify']

        # TODO -- Validate user's data.

        existing_user = User.query.filter_by(email=email).first()
        if not existing_user:
            new_user = User(email, password)
            db.session.add(new_user)
            db.session.commit()
            session['email'] = email
            return redirect('/')
        else:
            # TODO -- User better response messaging
            return "<h1>Duplicate user.</h1>"
        

    return render_template('register.html')

@app.route('/logout')
def logout():
    del session['email']
    return redirect('/')

@app.route('/', methods=['POST', 'GET'])
def index():

    if request.method == 'POST':
        task_name = request.form['task']
        new_task = Task(task_name)
        db.session.add(new_task)
        db.session.commit()

    # Will get all rows from the db.
    # tasks = Task.query.all()
    # Add a filter by to get only the non-complete tasks to list out.
    tasks = Task.query.filter_by(completed = False).all()
    completed_tasks = Task.query.filter_by(completed = True).all()

    return render_template('todos.html', title = "Get It Done!", tasks = tasks, completed_tasks = completed_tasks)

@app.route('/delete-task', methods=['POST'])
def delete_task():

    task_id = int(request.form['task-id'])
    task = Task.query.get(task_id) # Get the speicific object with this task_id
    # db.session.delete(task) # Deleting that task
    # db.session.commit() # All DB sessions in Flask need to be "commited"
    task.completed = True
    db.session.add(task)
    db.session.commit()

    return redirect('/')

if __name__ == "__main__":
    app.run()